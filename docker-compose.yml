version: '3'
services:
############## Methods associated with serving files ##############
  reverse-proxy:
    build:
      context: ./reverse-proxy
      dockerfile: 'Dockerfile'
    restart: always
    depends_on:
      - authentication-server
    volumes:
      - ./reverse-proxy/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80

############## Methods associated with user authentication ##############
  authentication-server:
    build: 
      context: ./authentication
      dockerfile: 'Dockerfile'
    env_file:
      - ./authentication/.env
    environment:
      - NODE_ENV='PRODUCTION'
    restart: always
    depends_on:
      - authentication-db

  authentication-db:
    restart: always
    image: mongo
    env_file:
      - ./authentication/.env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}

####################### Live chat servers and services ######################
  live-chat-server:
    build: 
      context: ./live_chat
      dockerfile: 'Dockerfile'
    env_file:
      - ./live_chat/.env
    environment:
      - NODE_ENV='PRODUCTION'
    restart: always
    depends_on:
      - live-chat-db
    ports:
      - 3005:3005

  live-chat-db:
    restart: always
    image: mongo
    env_file:
      - ./live_chat/.env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}



####################### posts servers and services ######################
  posts-server:
    build: 
      context: ./posts
      dockerfile: 'Dockerfile'
    env_file:
      - ./posts/.env
    environment:
      - NODE_ENV='PRODUCTION'
    restart: always
    depends_on:
      - posts-db
      - posts-cache
  posts-db:
    restart: always
    image: mongo
    env_file:
      - ./posts/.env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}


  posts-cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes: 
      - ./redis-posts-cache:/data

####################### Start up front end service ######################
  frontend-server:
    build: 
      context: ./frontend
      dockerfile: 'Dockerfile'
    environment:
      - NODE_ENV='PRODUCTION'
    restart: always
    depends_on:
      - posts-server
      - authentication-server
      - live-chat-server
